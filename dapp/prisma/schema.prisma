// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Use the PostgreSQL provider instead of MongoDB
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Use the appropriate data types for PostgreSQL
model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String?
  avatar     String?
  createdAt  DateTime @default(now()) @db.Timestamp(6) // Adjust the precision based on your needs
  verified   Boolean  @default(false)
  filledForm Boolean  @default(false)
}

// Campaigns, each card will be viewed from the dashboard/campaigns route
// model CampaignCard {
//   id              Int      @id @default(autoincrement())
//   contractAddress String   @map(name: "contract_address")
//   ownerName       String   @map(name: "owner_name")
//   title           String
//   image           String
//   goal            Int
//   collected       Int
//   lastUpdated     DateTime @map(name: "last_updated")
// }

model Campaign {
  id              Int           @id @default(autoincrement())
  contractAddress String        @unique
  ownerId         Int           @map(name: "owner_id")
  title           String
  description     String
  category        String
  image           String
  video           String?
  goal            Int
  collected       Int
  type            CampaignType
  createdAt       DateTime      @default(now())
  endAt           DateTime      
  updatedAt       DateTime      @updatedAt
  owner           Owner         @relation(fields: [ownerId], references: [id])
  contributers    Contributer[]
  rewards         Reward[]
  isFinished      Boolean       @default(false)
  isFailed        Boolean       @default(false)
}

model Contributer {
  id            Int      @id @default(autoincrement())
  name          String?
  walletAddress String   @map(name: "wallet_address")
  amount        String
  date          DateTime
  campaign      Campaign @relation(fields: [campaignId], references: [id])
  campaignId    Int   @map(name: "campaign_id")
}

model Reward {
  id         Int      @id @default(autoincrement())
  name       String
  minAmount  String   @map(name: "min_amount")
  prize      String
  image      String?
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int   @map(name: "campaign_id")
}

model Owner {
  id            Int        @id @default(autoincrement())
  walletAddress String     @unique
  email         String
  campaigns     Campaign[]
}

enum CampaignType {
  Reward
  Donation
}
